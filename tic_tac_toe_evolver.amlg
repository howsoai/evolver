;attempts to use genetic programming to evolve tic-tac-toe playing entities
(declare
	(assoc
		options (apply "associate" (tail (get (args) "argv")))
	)
	
	(declare (assoc
		max_num_generations (or (get options "-num-generations") .infinity)
		target_time (or (get options "-target-time") .infinity)
	))

	(load_entity "./tic_tac_toe.amlg" "TicTacToeGame")
	(load_persistent_entity "./evolver.amlg" "evolver" (true))
	(set_entity_rand_seed "evolver" (rand))

	(null
		#^get_player_input
			(system "readline")
	
		;this function is passed into the tic-tac-toe framework, so it
		; will be called as if it is in that entity
		#get_user_move (seq
			(call print_board (assoc board board))
				
			;get player input
			(print "Player " player "\n")
			(print "Number of positions: " (call count_positions (assoc
				player player board board)		
			) "\n")

			(let (assoc cur_move_row 0 cur_move_column 0)
				(print "Enter row of move (0, 1, or 2): ")
				(assign (assoc cur_move_row (call_container "^get_player_input")))
				(print "Enter column of move (0, 1, or 2): ")
				(assign (assoc cur_move_column (call_container "^get_player_input")))
				(list cur_move_row cur_move_column)
			)
		)
		
		#^get_move_from_entity
				(call_entity entity "react" (assoc
					board board
					player player
					)
					;total number of execution cycles
					2000
					;count the entity size toward total memory allowed to be used
					(- 2000 (total_entity_size entity))
					;limit stack depth to something reasonable
					70
					;maximum contained entities
					5
					;maximum entity depth
					3
					;max entity name length
					25
					)
				
		#get_player_1_move
			(call_container "^get_move_from_entity" (assoc
				board board
				player player
				entity (call_container "^player_1_entity")
			))
			
		#get_player_2_move
			(call_container "^get_move_from_entity" (assoc
				board board
				player player
				entity (call_container "^player_2_entity")
			))
		
		#^player_1_entity
			null
			
		#^player_2_entity
			null
	
	)

	
	(declare (assoc
				player_2_ai "male6"
	) )

	(call_entity "evolver" "initialize_population_manifest")
	
	(declare (assoc
		start_time (system_time)
		generation 0
	))
	(while (and
			(< generation max_num_generations)
			(< (- (system_time) start_time) target_time)
		)
		;play a game with each ai
		(map (lambda (let
					(assoc
						player_1 (current_value 1)
						player_2 (call_entity "evolver" "get_random_individual")
						
						player_1_complexity 0
						player_2_complexity 0
					)
				(system "validate")
				(assign (assoc
					player_1_complexity (call_entity "evolver" "get_individual_size_complexity" (assoc id player_1))
					player_2_complexity (call_entity "evolver" "get_individual_size_complexity" (assoc id player_2))
				))
					
				(assign_to_entities (assoc
					^player_1_entity (list "evolver" player_1)
					^player_2_entity (list "evolver" player_2) ))
					
				(print "Beginning game of " player_1 " versus " player_2 " at "
					(format (system_time) "number" "date:%Y-%m-%d-%H.%M.%S") "\n")
				
				;can specify "get_user_move" for an interactive version
				(let (call_entity "TicTacToeGame" "play_game"
						(assoc player_controllers (list get_player_1_move get_player_2_move)))
						
					(print "Final results of " player_1 " versus " player_2 " at "
						(format (system_time) "number" "date:%Y-%m-%d-%H.%M.%S") "\n")
					(call_entity "TicTacToeGame" "print_board" (assoc board board))
					(print (concat "Player " winning_player " won\n"))
					(print "Player 1 score: " player_1_score "\nPlayer 2 score: " player_2_score "\n")
					(print "Player 1 complexity: " player_1_complexity "\nPlayer 2 complexity: " player_2_complexity "\n")

					(assign (assoc
						player_1_score (/ player_1_score (log (max 50 player_1_complexity)))
						player_2_score (/ player_2_score (log (max 50 player_2_complexity)))
					))
					(print "Player 1 complexity normalized score: " player_1_score "\nPlayer 2 complexity normalized score: " player_2_score "\n")

					(call_entity "evolver" "update_score" (assoc id player_1 score player_1_score))
					(call_entity "evolver" "update_score" (assoc id player_2 score player_2_score))
				)
			) )
			(call_entity "evolver" "get_all_individuals")
		)
		(system "validate")
		(call_entity "evolver" "population_cycle" (assoc mutation_rate 0.03))
		(system "validate")
		(accum "generation" 1)
	)
	
	(print "Number of generations: " generation "\n")
	(print "Elapsed time: " (- (system_time) start_time) "\n")
)
