;runs the game tic-tac-toe
; if this file is run directly it will play two users against each other
; it can also be called as a library
(seq
	
	(null
		#print_board
			(map
				(lambda
					(print (apply "concat" (current_value)) "\n")
				)
				board
			)
		
		;applies the move to the board and returns the new board
		; if the move is not applicable, it retuns the board as-is
		;parameters:
		; board: a list of lists, each 3 long
		; player: value of the player (number, string, etc.)
		; row: the row position to move to
		; column: the column position to move to
		#make_move
	
			(if
				;in range, and unset then set the new value
				(and	(<= 0 row 2)
						(<= 0 column 2)
						(= (get (get board row) column) 0)
				)
				(set board
					row
					(set (get board row) column player)
				)
				
				;else return the board as it is
				board
			)
		
		;evaluates the number of successful moves played by specified player
		;parameters:
		;board
		;player
		#count_positions
			(size (filter
				(lambda (= player (current_value)))
				(append (get board 0) (get board 1) (get board 2))
			))
		
		;checks the given board to see if there is a winner, if so, returns the player
		; otherwise returns (false), or -1 if tie
		#check_win
			(or
			
				;check rows
				(and (apply "=" (get board 0))
					(get (get board 0) 0)
				)
				
				(and (apply "=" (get board 1))
					(get (get board 1) 0)
				)
				
				(and (apply "=" (get board 2))
					(get (get board 2) 0)
				)
				
				;check columns
				(or 
					(and
						(=  (get (get board 0) 0)
							(get (get board 1) 0)
							(get (get board 2) 0)
						)
						(get (get board 0) 0)
					)
					(and
						(=  (get (get board 0) 1)
							(get (get board 1) 1)
							(get (get board 2) 1)
						)
						(get (get board 0) 1)
					)
					(and
						(=  (get (get board 0) 2)
							(get (get board 1) 2)
							(get (get board 2) 2)
						)
						(get (get board 0) 2)
					)
				)
	        
				;check diagonals
				(and
					(=  (get (get board 0) 0)
						(get (get board 1) 1)
						(get (get board 2) 2)
					)
					(get (get board 0) 0)
				)
				
				(and
					(=  (get (get board 2) 0)
						(get (get board 1) 1)
						(get (get board 0) 2)
					)
					(get (get board 2) 0)
				)
			
				;check tie last
				(if
					(= 9
						(size (filter
							(lambda (!= 0 (current_value)))
							(append (get board 0) (get board 1) (get board 2))
						))
					)
					-1
				)
			
			)
		
		#get_player_input
			(system "readline")
		
		#get_user_move (seq
			(call print_board (assoc board board))
				
			;get player input
			(print "Player " player "\n")
			(print "Number of positions: " (call count_positions (assoc
				player player board board)		
			) "\n")

			(let (assoc cur_move_row 0 cur_move_column 0)
				(print "Enter row of move (0, 1, or 2): ")
				(assign (assoc cur_move_row (call get_player_input)))
				(print "Enter column of move (0, 1, or 2): ")
				(assign (assoc cur_move_column (call get_player_input)))
				(list cur_move_row cur_move_column)	
			)
		)
		
		;runs a full tic-tac-toe game for a maximum number of turns
		;parameters: player_controllers: a list of callbacks to get the move for each player
		#play_game (seq
			(declare (assoc
				board
					(list
						(list 0 0 0)
						(list 0 0 0)
						(list 0 0 0)
					)
				player 0
				cur_move_row 1
				cur_move_column 1
				winning_player (false)
				turns 0
				max_num_turns 20
			) )
		
		
			(while (and (= winning_player (false)) (< turns max_num_turns))
				
				;set current player
				(assign (assoc player (+ (mod player 2) 1)))
				(accum (assoc turns 1))

				;get move from player controller
				(let (assoc results 
						(call
							(get player_controllers (- player 1))
							(assoc board board player player))
						)
					
					(assign (assoc
						cur_move_row (get results 0)
						cur_move_column (get results 1)))
				)
				
				(print (concat "Player " player " moving " cur_move_row ", " cur_move_column) "\n")
				
				;make move
				(assign (assoc board 
					(call make_move (assoc
										board board
										row cur_move_row
										column cur_move_column
										player player
										))
				))
				
				(assign (assoc winning_player (call check_win (assoc board board))))
			)
			
			(assoc
				board board
				winning_player winning_player
				player_1_score (if  (= winning_player 1)  50
									(= winning_player -1) 40
									(call count_positions (assoc player 1 board board))
								)
				player_2_score (if  (= winning_player 2)  50
									(= winning_player -1) 40
									(call count_positions (assoc player 2 board board))
								)
				
				)
	
		)
			
	)
	
	;if the program is run directly, this will play the game
	; otherwise, if loaded as a library, this part will not be run
	(let (call play_game (assoc player_controllers (list get_user_move get_user_move)))
		(call print_board (assoc board board))
		(print (concat "Player " winning_player " won\n"))
		(print "Player 1 score: " player_1_score "\nPlayer 2 score: " player_2_score "\n")
	
	)
)
